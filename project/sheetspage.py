# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sheets.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from QSqlModels.models import ListModel
from QSqlModels.orm.models import Agent , Project , Source ,RowOfData , RowOfLiveData
from QSqlModels.orm.db import session , con , engine 
from qmodels import QueryTableModel , MyMessageBox
import pandas 
from sqlalchemy import text
from utils import getdir


class SheetsPage(QtWidgets.QWidget):
    def __init__(self, parent:QtWidgets.QWidget=None):
        super().__init__(parent)
        self.setObjectName("SheetsPage")
        self.resize(783, 607)
        self.msg = MyMessageBox(self)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(self.widget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setContentsMargins(15, 15, 15, 15)
        self.horizontalLayout_2.setSpacing(30)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.countbox = QtWidgets.QSpinBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.countbox.setSizePolicy(sizePolicy)
        self.countbox.setObjectName("countbox")
        self.horizontalLayout_2.addWidget(self.countbox)
        self.agentbox = QtWidgets.QComboBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.agentbox.sizePolicy().hasHeightForWidth())
        self.agentbox.setSizePolicy(sizePolicy)
        self.agentbox.setObjectName("agentbox")
        self.horizontalLayout_2.addWidget(self.agentbox)
        self.projectbox = QtWidgets.QComboBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.projectbox.sizePolicy().hasHeightForWidth())
        self.projectbox.setSizePolicy(sizePolicy)
        self.projectbox.setObjectName("projectbox")
        self.horizontalLayout_2.addWidget(self.projectbox)
        self.sourcebox = QtWidgets.QComboBox(self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.sourcebox.setSizePolicy(sizePolicy)
        self.sourcebox.setObjectName("sourcebox")
        self.horizontalLayout_2.addWidget(self.sourcebox)
        self.verticalLayout_2.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.widget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout.setSpacing(20)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tableView = QtWidgets.QTableView(self.frame_2)
        self.tableView.setObjectName("tableView")
        self.verticalLayout.addWidget(self.tableView)
        self.counterlabel = QtWidgets.QLabel(self.frame_2)
        self.counterlabel.setObjectName("counterlabel")
        self.counterlabel.setText("Count : ")
        self.verticalLayout.addWidget(self.counterlabel, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.widget)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.exportBtn = QtWidgets.QToolButton(self.frame_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.exportBtn.setSizePolicy(sizePolicy)
        self.exportBtn.setObjectName("exportBtn")
        self.exportBtn.setIcon(QtGui.QIcon("assets\icons\export.png"))
        self.exportBtn.setFixedSize(50,50)
        self.exportBtn.setIconSize(QtCore.QSize(30,30))
        self.horizontalLayout_3.addWidget(self.exportBtn, 0, QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignVCenter)
        font = QtGui.QFont()
        font.setItalic(True)
        font.setPointSize(10)
        font.setFamily("Narkisim")
        self.signture = QtWidgets.QLabel(self.frame_3)
        self.signture.setFont(font)
        self.signture.setObjectName("signture")
        self.signture.setText("MarCode")
        self.horizontalLayout_3.addWidget(self.signture, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignmentFlag.AlignBottom)
        self.horizontalLayout_3.setStretch(0, 1)
        self.horizontalLayout_3.setStretch(1, 1)
        self.verticalLayout_2.addWidget(self.frame_3)
        self.verticalLayout_2.setStretch(0, 2)
        self.verticalLayout_2.setStretch(1, 8)
        self.verticalLayout_2.setStretch(2, 1)
        self.horizontalLayout.addWidget(self.widget)
        self.sourcebox.setFixedHeight(40)
        self.projectbox.setFixedHeight(40)
        self.agentbox.setFixedHeight(40)
        self.countbox.setFixedHeight(40)
        self.countbox.setMaximum(10000)
        self.query = ""

        self.listmodelagent = ListModel(Agent)
        self.agentbox.setModel(self.listmodelagent)

        self.listmodelproject = ListModel(Project)
        self.projectbox.setModel(self.listmodelproject)

        self.listmodelsource = ListModel(Source)
        self.sourcebox.setModel(self.listmodelsource)

        self.querymodel = QueryTableModel()
        self.querymodel.setEditStrategy(self.querymodel.EditStrategy.OnManualSubmit)
        self.tableView.setModel(self.querymodel)

        self.querymodel.lengthChanged.connect(lambda x: self.counterlabel.setText(f"Count : {x}") )
        

        self.exportBtn.clicked.connect(self.export)
        self.selectablequery = """
        SELECT data.id AS id, data.name AS name, data.number AS number, sources.name AS source 
        FROM data      
        JOIN sources ON sources.id = data.source_id
        """
        self.updaterquery = """
        UPDATE data
        SET taked = 1
        """
        self.refeshShortcut = QtWidgets.QShortcut('Ctrl+R',self)
        self.refeshShortcut.activated.connect(self.refresh)
        self.refresh()
        self.sourcebox.currentTextChanged.connect(self.setQuery)
        self.countbox.valueChanged.connect(self.setQuery)


    def setQuery(self):
        if self.sourcebox.currentText() :
            sourcefilter = f"""AND data.source_id = {session.query(Source).filter(Source.name==self.sourcebox.currentText()).first().id}""" 
        else :
            sourcefilter = ""
        self.query = f"""
        WHERE data.id IN (
            SELECT data.id
            FROM data
            WHERE data.deleted = 0
            AND data.taked = 0
            {sourcefilter}
            AND data.number NOT IN (
                SELECT live_data.number
                FROM leads
                JOIN live_data ON live_data.id = leads.live_data_id
            )
            LIMIT {self.countbox.value()} 
        );
        """
        self.querymodel.setQuery(self.selectablequery+self.query)


    def export(self):
        try :
            df = pandas.read_sql_query(self.selectablequery+self.query,con)
            directory = getdir(f"{self.agentbox.currentText()}-{self.projectbox.currentText()}-{len(df)}.xlsx")
            df.to_excel(directory,index=False,columns=['number'])
            agent_id = session.query(Agent).filter(Agent.name==self.agentbox.currentText()).first().id
            project_id = session.query(Project).filter(Project.name==self.projectbox.currentText()).first().id
            source_id = session.query(Source).filter(Source.name==self.sourcebox.currentText()).first().id
            df['models'] = df['number'].apply(lambda x : RowOfLiveData(
                agent_id = agent_id ,
                project_id = project_id ,
                source_id = source_id ,
                number = x 
             ))
            session.add_all(df['models'].to_list())
            session.commit()
            self.querymodel.setQuery(self.updaterquery + self.query)
            self.querymodel.submitAll()
            self.msg.showInfo(f"Successfully Exported to \'{directory}\' and updated")
        except Exception as e :
            self.msg.showCritical(f"Can't Export\n{e}")

    def refresh(self):
        self.listmodelagent.refresh()
        self.listmodelproject.refresh()
        self.listmodelsource.refresh()
        self.querymodel.clear()
        self.countbox.clear()
        self.query = ""


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = SheetsPage()
    ui.show()
    sys.exit(app.exec_())
